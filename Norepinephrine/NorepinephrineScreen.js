// NorepinephrineScreen.js
import React, { useMemo, useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  ScrollView,
  StyleSheet,
  Alert,
  Platform,
  KeyboardAvoidingView,
} from 'react-native';

// --- —É—Ç–∏–ª–∏—Ç—ã ---
const parseNum = (v) => {
  if (v === null || v === undefined) return undefined;
  const s = String(v).trim().replace(',', '.');
  if (s === '') return undefined;
  const n = Number(s);
  return Number.isFinite(n) ? n : undefined;
};

const fmt = (v, d = 2) => {
  if (!Number.isFinite(v)) return '‚Äî';
  const abs = Math.abs(v);
  if (abs >= 100) return v.toFixed(0);
  if (abs >= 10) return v.toFixed(1);
  return v.toFixed(d);
};

const Section = ({ title, children }) => (
  <View style={styles.section}>
    <Text style={styles.sectionTitle}>{title}</Text>
    <View style={styles.card}>{children}</View>
  </View>
);

// –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –æ–±—ä—ë–º –ø–∞–∫–µ—Ç–∞ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å –∫–∞–ø–µ–ª—å–Ω–∏—Ü–µ–π
const BAG_VOL_ML = 250;

export default function NorepinephrineScreen() {
  // —Ä–∞–∑—É–º–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç—ã
  const [weight, setWeight]   = useState('70');   // –∫–≥
  const [dose, setDose]       = useState('0.1');  // –º–∫–≥/–∫–≥/–º–∏–Ω
  const [drugMg, setDrugMg]   = useState('8');    // –º–≥ –≤ —à–ø—Ä–∏—Ü–µ/–ø–∞–∫–µ—Ç–µ
  const [syrVol, setSyrVol]   = useState('20');   // –º–ª —à–ø—Ä–∏—Ü–∞

  const result = useMemo(() => {
    const W = parseNum(weight);
    const D = parseNum(dose);      // –º–∫–≥/–∫–≥/–º–∏–Ω
    const M = parseNum(drugMg);    // –º–≥
    const V = parseNum(syrVol);    // –º–ª

    const ok = [W, D, M, V].every(n => Number.isFinite(n) && n > 0);
    if (!ok) return { ok: false };

    // --- –®–ü–†–ò–¶-–ü–û–ú–ü–ê (–∫–∞–∫ –≤–≤–µ–¥–µ–Ω–æ: M –º–≥ –≤ V –º–ª) ---
    const conc_syr_mcg_ml = (M * 1000) / V;                // –º–∫–≥/–º–ª
    const mlph_syr = (D * W * 60) / conc_syr_mcg_ml;       // –º–ª/—á

    // --- –ö–ê–ü–ï–õ–¨–ù–ò–¶–ê (—Ç–æ—Ç –∂–µ M –º–≥, –Ω–æ —Ä–∞–∑–≤–µ–¥–µ–Ω–æ –≤ 250 –º–ª 5% –≥–ª—é–∫–æ–∑—ã) ---
    const conc_bag_mcg_ml = (M * 1000) / BAG_VOL_ML;       // –º–∫–≥/–º–ª
    const mlph_bag = (D * W * 60) / conc_bag_mcg_ml;       // –º–ª/—á
    const gtt20 = (mlph_bag / 60) * 20;                    // –∫–∞–ø/–º–∏–Ω –¥–ª—è 20 –∫–∞–ø/–º–ª

    return {
      ok: true,
      conc_syr_mcg_ml,
      mlph_syr,
      conc_bag_mcg_ml,
      mlph_bag,
      gtt20,
    };
  }, [weight, dose, drugMg, syrVol]);

  const reset = () => {
    setWeight(''); setDose(''); setDrugMg(''); setSyrVol('');
  };

  const warnIfWeird = () => {
    if (!result.ok) return;
    // –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ —à–ø—Ä–∏—Ü–∞
    if (result.mlph_syr < 0.1 || result.mlph_syr > 30) {
      Alert.alert(
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ',
        '–ü–æ–ª—É—á–∏–ª–∞—Å—å –Ω–µ–æ–±—ã—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ñ—É–∑–∏–∏. –ß–∞—Å—Ç–æ –≤–∏–Ω–æ–≤–∞—Ç–∞ –º–∞—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–µ–¥–µ–Ω–æ 2100 –≤–º–µ—Å—Ç–æ 21.0).'
      );
    }
  };

  return (
    <KeyboardAvoidingView
      style={styles.container}
      behavior={Platform.OS === 'ios' ? 'padding' : undefined}
      keyboardVerticalOffset={Platform.OS === 'ios' ? 64 : 0}
    >
      <ScrollView contentContainerStyle={styles.content} keyboardShouldPersistTaps="handled">
        <Text style={styles.title}>üíâ –ù–æ—Ä–∞–¥—Ä–µ–Ω–∞–ª–∏–Ω ‚Äî —Ä–∞—Å—á—ë—Ç –∏–Ω—Ñ—É–∑–∏–∏</Text>
        <Text style={styles.subtitle}>
          –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ –¥–æ–∑–µ (–º–∫–≥/–∫–≥/–º–∏–Ω) –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏. –ö–∞–ø–ª–∏ ‚Äî –¥–ª—è —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è –≤ 250 –º–ª 5% –≥–ª—é–∫–æ–∑—ã.
        </Text>

        <Section title="–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ">
          <View style={styles.row}>
            <Text style={styles.label}>–ú–∞—Å—Å–∞ —Ç–µ–ª–∞</Text>
            <View style={styles.inputWrap}>
              <TextInput
                value={weight}
                onChangeText={setWeight}
                placeholder="–∫–≥"
                placeholderTextColor="#8b8b91"
                keyboardType={Platform.OS === 'ios' ? 'decimal-pad' : 'numeric'}
                style={styles.input}
              />
              <Text style={styles.unit}>–∫–≥</Text>
            </View>
          </View>

          <View style={styles.row}>
            <Text style={styles.label}>–î–æ–∑–∏—Ä–æ–≤–∫–∞</Text>
            <View style={styles.inputWrap}>
              <TextInput
                value={dose}
                onChangeText={setDose}
                placeholder="–º–∫–≥/–∫–≥/–º–∏–Ω"
                placeholderTextColor="#8b8b91"
                keyboardType={Platform.OS === 'ios' ? 'decimal-pad' : 'numeric'}
                style={styles.input}
              />
              <Text style={styles.unit}>–º–∫–≥/–∫–≥/–º–∏–Ω</Text>
            </View>
          </View>

          <View style={styles.row}>
            <Text style={styles.label}>–ù–æ—Ä–∞–¥—Ä–µ–Ω–∞–ª–∏–Ω (–≤ —Ä–∞—Å—Ç–≤–æ—Ä–µ)</Text>
            <View style={styles.inputWrap}>
              <TextInput
                value={drugMg}
                onChangeText={setDrugMg}
                placeholder="–º–≥"
                placeholderTextColor="#8b8b91"
                keyboardType={Platform.OS === 'ios' ? 'decimal-pad' : 'numeric'}
                style={styles.input}
              />
              <Text style={styles.unit}>–º–≥</Text>
            </View>
          </View>

          <View style={styles.row}>
            <Text style={styles.label}>–û–±—ä—ë–º —à–ø—Ä–∏—Ü–∞</Text>
            <View style={styles.inputWrap}>
              <TextInput
                value={syrVol}
                onChangeText={setSyrVol}
                placeholder="–º–ª"
                placeholderTextColor="#8b8b91"
                keyboardType={Platform.OS === 'ios' ? 'decimal-pad' : 'numeric'}
                style={styles.input}
              />
              <Text style={styles.unit}>–º–ª</Text>
            </View>
          </View>

          <View style={styles.actions}>
            <TouchableOpacity style={styles.secondary} onPress={reset}>
              <Text style={styles.secondaryText}>–°–±—Ä–æ—Å–∏—Ç—å</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.primary} onPress={warnIfWeird}>
              <Text style={styles.primaryText}>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</Text>
            </TouchableOpacity>
          </View>
        </Section>

        <Section title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã">
          {/* –®–ø—Ä–∏—Ü-–ø–æ–º–ø–∞ */}
          <View style={styles.resultRow}>
            <Text style={styles.resultLabel}>–ö–æ–Ω—Ü. —à–ø—Ä–∏—Ü–∞</Text>
            <Text style={styles.resultValue}>
              {result.ok ? `${fmt(result.conc_syr_mcg_ml)} –º–∫–≥/–º–ª` : '‚Äî'}
            </Text>
          </View>
          <View style={styles.resultRow}>
            <Text style={styles.resultLabel}>–°–∫–æ—Ä–æ—Å—Ç—å (—à–ø—Ä–∏—Ü-–ø–æ–º–ø–∞)</Text>
            <Text style={styles.resultValue}>
              {result.ok ? `${fmt(result.mlph_syr)} –º–ª/—á` : '‚Äî'}
            </Text>
          </View>

          {/* –ö–∞–ø–µ–ª—å–Ω–∏—Ü–∞ 250 –º–ª */}
          <View style={[styles.resultRow, { borderTopColor: '#e2e8f0', borderTopWidth: 1, marginTop: 8 }]}>
            <Text style={[styles.resultLabel, { color: '#475569' }]}>
              –ï—Å–ª–∏ —Ä–∞–∑–≤–µ—Å—Ç–∏ –≤ {BAG_VOL_ML} –º–ª 5% –≥–ª—é–∫–æ–∑—ã
            </Text>
            <Text style={[styles.resultValue, { color: '#475569' }]} />
          </View>
          <View style={styles.resultRow}>
            <Text style={styles.resultLabel}>–ö–æ–Ω—Ü. —Ä–∞—Å—Ç–≤–æ—Ä–∞</Text>
            <Text style={styles.resultValue}>
              {result.ok ? `${fmt(result.conc_bag_mcg_ml)} –º–∫–≥/–º–ª` : '‚Äî'}
            </Text>
          </View>
          <View style={styles.resultRow}>
            <Text style={styles.resultLabel}>–°–∫–æ—Ä–æ—Å—Ç—å (–º–ª/—á)</Text>
            <Text style={styles.resultValue}>
              {result.ok ? `${fmt(result.mlph_bag)} –º–ª/—á` : '‚Äî'}
            </Text>
          </View>
          <View style={styles.resultRow}>
            <Text style={styles.resultLabel}>–ö–∞–ø–ª–∏ –≤ –º–∏–Ω—É—Ç—É (20 –∫–∞–ø/–º–ª)</Text>
            <Text style={styles.resultValue}>
              {result.ok ? `${fmt(result.gtt20, 1)} –∫–∞–ø/–º–∏–Ω` : '‚Äî'}
            </Text>
          </View>

          <Text style={styles.hint}>
            –§–æ—Ä–º—É–ª–∞: –º–ª/—á = (–¥–æ–∑–∞ –º–∫–≥/–∫–≥/–º–∏–Ω √ó –º–∞—Å—Å–∞ √ó 60) / (–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –º–∫–≥/–º–ª).{'\n'}
            ¬´–ö–∞–ø–ª–∏/–º–∏–Ω¬ª —Å—á–∏—Ç–∞—é—Ç—Å—è –¥–ª—è —Ä–∞—Å—Ç–≤–æ—Ä–∞, —Ä–∞–∑–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –≤ 250 –º–ª (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞–∫–µ—Ç) —Å –∫–∞–ø–µ–ª—å–Ω–æ—Å—Ç—å—é 20 –∫–∞–ø/–º–ª.
          </Text>
        </Section>

        <View style={{ height: 24 }} />
      </ScrollView>
    </KeyboardAvoidingView>
  );
}

// --- —Å—Ç–∏–ª–∏ ---
const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#f8fafc' },
  content: { padding: 20, paddingBottom: 32 },
  title: {
    color: '#1e293b', fontSize: 24, fontWeight: '800',
    letterSpacing: -0.5, textAlign: 'center', marginBottom: 8,
  },
  subtitle: { color: '#64748b', fontSize: 14, textAlign: 'center', fontWeight: '500', marginBottom: 20 },
  section: { marginBottom: 20 },
  sectionTitle: { color: '#1e293b', fontWeight: '800', fontSize: 18, marginBottom: 12, letterSpacing: -0.3 },
  card: {
    backgroundColor: '#ffffff', borderColor: '#e2e8f0', borderWidth: 1, borderRadius: 16, padding: 16,
    shadowColor: '#0f172a', shadowOffset: { width: 0, height: 2 }, shadowOpacity: 0.08, shadowRadius: 6, elevation: 3,
  },
  row: { marginBottom: 16 },
  label: { color: '#374151', marginBottom: 8, fontWeight: '600', fontSize: 15 },
  inputWrap: {
    flexDirection: 'row', alignItems: 'center', backgroundColor: '#ffffff',
    borderColor: '#d1d5db', borderWidth: 2, borderRadius: 12, paddingHorizontal: 12, paddingVertical: 10,
  },
  input: { flex: 1, color: '#1e293b', fontSize: 16, fontWeight: '500', paddingVertical: 0 },
  unit: { color: '#64748b', marginLeft: 8, fontWeight: '600', fontSize: 14 },
  actions: { flexDirection: 'row', gap: 12, marginTop: 16, justifyContent: 'center' },
  primary: {
    paddingHorizontal: 20, paddingVertical: 12, backgroundColor: '#3b82f6', borderRadius: 16,
    shadowColor: '#3b82f6', shadowOffset: { width: 0, height: 2 }, shadowOpacity: 0.2, shadowRadius: 6, elevation: 4,
  },
  primaryText: { color: '#ffffff', fontWeight: '700', fontSize: 14 },
  secondary: { paddingHorizontal: 20, paddingVertical: 12, borderRadius: 16, borderWidth: 2, borderColor: '#e2e8f0', backgroundColor: '#ffffff' },
  secondaryText: { color: '#64748b', fontWeight: '600', fontSize: 14 },
  resultRow: { flexDirection: 'row', justifyContent: 'space-between', paddingVertical: 12, borderBottomColor: '#e2e8f0', borderBottomWidth: 1 },
  resultLabel: { color: '#374151', fontWeight: '600', flex: 1, paddingRight: 12, fontSize: 15 },
  resultValue: { color: '#059669', fontWeight: '800', fontSize: 16 },
  hint: { color: '#64748b', marginTop: 12, fontStyle: 'italic', fontSize: 14, lineHeight: 20 },
});
